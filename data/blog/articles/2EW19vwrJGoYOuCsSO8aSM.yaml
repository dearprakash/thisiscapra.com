---
:id: 2EW19vwrJGoYOuCsSO8aSM
:_meta:
  :content_type_id: 2wKn6yEnZewu2SCCkus4as
  :updated_at: '2015-12-16T09:25:42+00:00'
  :created_at: '2015-12-14T16:55:23+00:00'
  :id: 2EW19vwrJGoYOuCsSO8aSM
:title: Rebuilding Capra
:date: !ruby/object:DateTime 2015-01-10 00:00:00.000000000 Z
:slug: rebuilding-capra
:author:
- :id: 6wjiRDDynYGowcUeGI8UE6
  :_meta:
    :content_type_id: 1kUEViTN4EmGiEaaeC6ouY
    :updated_at: '2016-01-21T00:24:28+00:00'
    :created_at: '2015-12-15T14:05:00+00:00'
    :id: 6wjiRDDynYGowcUeGI8UE6
  :name: Ollie Kavanagh
:body: "So when we decided to rebuild the Capra website we had a big decision to make
  on technology. The old site was built in Wordpress and while we still love that
  and will use it on client projects ongoing it felt like overkill for our needs.
  We needed speed, ease of updating, ability to use pre-processors and a backend we
  were both familiar with. Static HTML generators seemed the way to go but we needed
  to overcome some hurdles first, the first decision was which one?\n\n### Enter the
  Middleman\n\nI've been using [Middleman App](http://middlemanapp.com) for while
  now both on personal projects and client sites and I love it. It ticks all the boxes
  for me: \n\n* A Ruby/Padrino backend which I'm familiar with.\n* Ability to use
  helpers & YAML data for generating views.\n* Built in pre-processors for CSS & Javascript.\n*
  Ability to use the asset pipeline.\n* Automatically builds with pretty URLs.\n*
  A large community behind it and easily extendable.\n\nOf course using a static site
  generator comes with some drawbacks which is the ability to run server side code
  to perform some specfic tasks. I'm going to run through some of the solutions we
  came up with to solve specific functions we wanted on the site.\n\n### Dynamically
  generated pages\n\nWe wanted to avoid duplicating lots of code within the site,
  so we needed a way to dynamically generate the project pages. Luckliy [Middleman](http://middlemanapp.com)
  has the ability to read YAML data files and build HTML pages from there. First we
  create a `work_items.yml` date file...\n\n    - name: 'Alfred App'\n      featured:
  true\n      title: 'Designed to be productive.'\n      client_intro: \"See how we
  designed your computer's butler for OSX.\"\n      url: 'alfred-app'\n      link:
  'http://alfredapp.com'\n    - name: '8-50 Sports Digest'\n      featured: true\n
  \     title: 'Simple sports news.'\n      client_intro: \"See how we designed a
  sports app for iPhone and Android.\"\n      url: 'sports-digest-8-50'\n      link:
  'http://850sportsapp.com'\n      ................\n\nThen in our `config.rb` file
  we can call this YAML file and magically generate pages based on these fields.\n\n
  \   data.work_items.clients.each_with_index do |client, index|\n      proxy \"/work/#{client.url}.html\",
  \"/work-item.html\", locals: { \n        client: client,\n        title: client.name,\n
  \       description: client.intro\n      }, :ignore => true\n    end\n\nNow we only
  have to use one `.erb` file to output all our projects.\n\n### Blogging\n\nMiddleman
  has a [blogging extension](https://github.com/middleman/middleman-blog) available
  which is great, but coming from Wordpress we wanted something with a WYSIWYG editor
  and the ability to automatically add/edit blogposts without rebuilding the site
  manually every time and re-deploying it. Some research led me onto [Prose.io](http://prose.io/)
  which describes itself as...\n\n> Prose is a content editor for GitHub designed
  for managing websites.\n\nPerfect, **BUT** it was designed for Github pages so how
  do I use this with Middleman? Luckily Prose has a seperate config file that can
  be used for just this case.\n\nFirstly create a `_prose.yml` file within your root
  folder.\n\n    prose:\n      media: 'source/images/blog'\n      rooturl: 'source/blog'\n
  \     metadata:\n        source/blog:\n          - name: \"title\"\n            field:\n
  \           element: \"text\"\n            label: \"Title\"\n            value:
  \"\"\n          - name: date\n            field:\n            element: \"text\"\n
  \           label: \"Date\"\n            value: \"\"\n          - name: \"author\"\n
  \           field:\n            element: \"text\"\n            label: \"Author\"\n
  \           value: \"\"\n          - name: \"tags\"\n            field:\n            element:
  \"multiselect\"\n            label: \"Tags\"\n            alterable: true\n\nThere
  are a couple of problems we needed to solve with Prose. Currently it doesn't generate
  date yml frontmatter which is needed by Middleman so I add a meta field for this,
  I also include extra meta fields for tags and author.\n\nThe image uploading is
  still rather wonky and although I added the 'media:' line above this doesn't seem
  to work properly so we are currently hosting our images on dropbox.\n\nSo we can
  now write our Middleman blog posts in Prose and they are automatically saved to
  our Github repo, that solves one problem, but how can I make this update on our
  live static site? CLI comes to the rescue.\n\n### Hosting & Continuous Delivery\n\nI'd
  whittled down my hosting to a choice between [Heroku](https://www.heroku.com/) and
  [Divshot](http://divshot.com). The free hosting is great on Heroku but the dyno's
  spin down when not in use and you have to use a service such as pingdom to keep
  it alive wich seemed somewhat wrong to me. Divshot is built for static site hosting
  and comes with built in push deploys and automatic setup with CLI tools.\n\nI had
  some visibilty on CLI tools from working at [Kyan](http://kyan.com) but never set
  it up for myself. I started playing with [Travis](https://travis-ci.org/) but I
  was having problems getting it playing ball with Middleman and Divshot so I was
  pointed towards [Codeship](https://codeship.com) which has been great. After linking
  up Github --> Codeship --> Divshot I just needed to let Codeship know I was deploying
  a Ruby app so I added a setup command to install all the gems needed.\n\n    bundle
  install\n\nI then run a custom deploy script to install the Divshot CLI, build the
  site from a Rake task within Middleman and push this to Divshot.\n\n####Rakefile\n\n
  \   desc \"Build the website from source\"\n    task :build do\n      puts \"##
  Building website\"\n      status = system(\"middleman build --clean\")\n      puts
  status ? \"OK\" : \"FAILED\"\n    end\n\n####Custom deploy script\n\n    npm install
  -g divshot-cli\n    rake build && divshot push staging --token \"${DIVSHOT_TOKEN}\"\n\nPerfect,
  now we can write a blog post in Prose, it saves to our Github repo and is automically
  pushed to our live staging environment.\n\n### Contact page\n\nThere are a couple
  of ways we could approach this, we just need a way to post data to a url and receive
  it in our email. Middleman does have the option of parsing non HTML files in it
  so we could use some PHP and write a script to deliver our email, it kinda defeats
  the point of a static site though. After some searching around I stumbled upon [Formkeep](https://formkeep.com/)
  which is perfect. It stores all the replies within a nice little UI and I have the
  option of sending them to both [Trello](https://trello.com/) and [Gmail](https://mail.google.com/).
  Job done!\n\nOur source code is [open source](https://github.com/thisiscapra/thisiscapra.com)
  so feel free to have a look around and steal anything you need.\n\n**EDIT** Since
  writing this article I've actually moved back to Travis as it's free for open source
  public projects. The final setup for the `.travis.yml` file is as follows:\n\n    language:
  ruby\n    rvm:\n      - 2.1.5\n    script: bundle exec middleman build --verbose\n
  \   deploy:\n      provider: divshot\n      api_key:\n        secure: YOUR_SECURE_API_KEY\n
  \     environment: \n        master: production\n      on:\n        repo: YOUR_REPO\n
  \       skip_cleanup: true\n"
:tags:
- ruby
- middleman
- html5
- css3
- deployment
:comments: false
